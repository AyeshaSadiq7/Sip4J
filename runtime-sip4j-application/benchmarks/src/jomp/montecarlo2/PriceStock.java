/**************************************************************************
*                                                                         *
 *             Java Grande Forum Benchmark Suite - Version 2.0             *
*                                                                         *
*                            produced by                                  *
*                                                                         *
*                  Java Grande Benchmarking Project                       *
*                                                                         *
*                                at                                       *
*                                                                         *
*                Edinburgh Parallel Computing Centre                      *
*                                                                         *
*                email: epcc-javagrande@epcc.ed.ac.uk                     *
*                                                                         *
*      Original version of this code by Hon Yau (hwyau@epcc.ed.ac.uk)     *
*                                                                         *
*      This version copyright (c) The University of Edinburgh, 1999.      *
*                         All rights reserved.                            *
*                                                                         *
**************************************************************************/


package jomp.montecarlo2;
 

/**
  * Class to do the work in the Application demonstrator, in particular
  * the pricing of the stock path generated by Monte Carlo.  The run
  * method will generate a single sequence with the required statistics,
  * estimate its volatility, expected return rate and final stock price
  * value.
  *
  * @author H W Yau
  * @version $Revision: 1.5 $ $Date: 1999/02/16 18:52:15 $
  */
public class PriceStock extends Universal {

  //------------------------------------------------------------------------
  // Class variables.
  //------------------------------------------------------------------------
  /**
    * Class variable for determining whether to switch on debug output or
    * not.
    */
  public static boolean DEBUG=true;
  /**
    * Class variable for defining the debug message prompt.
    */
  protected static String prompt="PriceStock> ";

  //------------------------------------------------------------------------
  // Instance variables.
  //------------------------------------------------------------------------
  /**
    * The Monte Carlo path to be generated.
    */
  private MonteCarloPath mcPath;
  /**
    * String identifier for a given task.
    */
  private String taskHeader;
  /**
    * Random seed from which the Monte Carlo sequence is started.
    */
  private long randomSeed=-1;
  /**
    * Initial stock price value.
    */
  private double pathStartValue=Double.NaN;
  /**
    * Object which represents the results from a given computation task.
    */
  private ToResult result;
  private double expectedReturnRate=Double.NaN;
  private double volatility=Double.NaN;
  private double volatility2=Double.NaN;
  private double finalStockPrice=Double.NaN;
  private double[] pathValue;

  //------------------------------------------------------------------------
  // Constructors.
  //------------------------------------------------------------------------
  /**
    * Default constructor.
    */
  public PriceStock() {
    super();
    mcPath = new MonteCarloPath(); // none(mcPath)
    setprompt(prompt);// share
    setDEBUG(DEBUG);// share
  }
  //------------------------------------------------------------------------
  // Methods.
  //------------------------------------------------------------------------
  //------------------------------------------------------------------------
  // Methods which implement the Slaveable interface.
  //------------------------------------------------------------------------
  /**
    * Method which is passed in the initialisation data common to all tasks,
    * and then unpacks them for use by this object.
    *
    * @param obj Object representing data which are common to all tasks.
    */
  public void setInitAllTasks(Object obj) {
    ToInitAllTasks initAllTasks = (ToInitAllTasks) obj;
    mcPath.setname(initAllTasks.getname());
    mcPath.setstartDate(initAllTasks.getstartDate());
    mcPath.setendDate(initAllTasks.getendDate());
    mcPath.setdTime(initAllTasks.getdTime());
    mcPath.setreturnDefinition(initAllTasks.getreturnDefinition());
    mcPath.setexpectedReturnRate(initAllTasks.getexpectedReturnRate());
    mcPath.setvolatility(initAllTasks.getvolatility());
    int nTimeSteps = initAllTasks.getnTimeSteps();
    mcPath.setnTimeSteps(nTimeSteps);
    this.pathStartValue = initAllTasks.getpathStartValue();
    mcPath.setpathStartValue(pathStartValue);
    mcPath.setpathValue(new double[nTimeSteps]);
    mcPath.setfluctuations(new double[nTimeSteps]);
  }
  /**
    * Method which is passed in the data representing each task, which then
    * unpacks it for use by this object.
    *
    * @param obj Object representing the data which defines a given task.
    */
  public void setTask(Object obj) {
    ToTask task = (ToTask) obj;
    this.taskHeader    = task.getheader();
    this.randomSeed    = task.getrandomSeed();
  }
  /**
    * The business end.  Invokes the necessary computation routine, for a
    * a given task.
    */
  public void run() {
    try{
    	
      mcPath.computeFluctuationsGaussian(randomSeed);
      mcPath.computePathValue(pathStartValue);
      
      RatePath rateP = new RatePath(mcPath);
      ReturnPath returnP = rateP.getReturnCompounded();
      returnP.estimatePath();
     
      expectedReturnRate = returnP.getexpectedReturnRate();
      volatility = returnP.getvolatility();
      volatility2 = returnP.getvolatility2();
      finalStockPrice = rateP.getEndPathValue();
      pathValue = mcPath.getpathValue();//
      
    } catch( DemoException demoEx ) {
      errPrintln(demoEx.toString());
    }
  }
  /*	
   * Method which returns the results of a computation back to the caller.
   *
   * @return An object representing the computed results.
   */
  public Object getResult() {
    String resultHeader = "Result of task with Header="+taskHeader+": randomSeed="+randomSeed+": pathStartValue="+pathStartValue;
    ToResult res = new ToResult(resultHeader,expectedReturnRate,volatility,
    volatility2,finalStockPrice,pathValue);
    return (Object) res;
  }
}
