package java_annotations;
import java.lang.annotation.Annotation;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.util.List;
import org.junit.*;
public class TestAnnotations {

	    
	public TestAnnotations(){
		//MyClassLoader.getAnnotatedCompilationUnits();
	}
	@Test 
	public void main(){
		TestAnnotations obj = new TestAnnotations();
	}
	/*public void testMethodAnnotations() throws SecurityException, NoSuchMethodException {
	    
  	    	Member[] mbrs = null;
  	    	
  	    	 Class<?> c = null;
  	    	
  	    	String cwd = System.getProperty("user.dir");
  	        
  	    	System.out.println("Current working directory : " + cwd);
  	    	
  	        IProject[] projects = Workspace_Utilities.getWorkspaceProjects();
  			
  		    IJavaElement javaElement = null;
  					
  			IProject annProj = Parser_Utilities.getAnnotationProject(projects);
  			
  			if(annProj != null){
  				javaElement = JavaCore.create(annProj);
  				
  			}
  			if (javaElement == null) {
  			  System.out.println("No Java Model in workspace");
  			}
  			
  			
  			  comUnits = Workspace_Utilities.collectCompilationUnits(javaElement);

  			  CompilationUnit cu = null;

			  for (ICompilationUnit cunit : comUnits) {
				  
				  cu = Workspace_Utilities.getCompilationUnit(cunit);
			   
				  System.out.println(cu.getJavaElement().getElementName());
				  
				  if(cu.getJavaElement().getElementName().equals("AnnotationExample.java")){
				   
					  cu.accept(new ASTVisitor(){ 
			          @Override 
			          public boolean visit(TypeDeclaration node) { 
			        	
			           System.out.println("class name = "+node.getName().toString());
			        		
			        	Member[] mbrs = null;
			        	 
						Class<?> c = node.getName().toString().getClass();
						
						try {
							c = Class.forName("java_annotations."+node.getName().toString());
						} catch (ClassNotFoundException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					
						mbrs = c.getDeclaredMethods();
						
						for (Member mbr : mbrs) {
							System.out.printf("  %s%n", ((Method)mbr).toGenericString());
						}
						
						int safeApproxmiations = 0;
			  	    	
			  	    	int independentmethods = 0;
			  	    
						Method[] methods = c.getDeclaredMethods();
				    	
				    	for (Method m : methods){
				    		try {
				            	Assert.assertNotNull("Method :"+m.getName() + " does not have any permission annotations",
				            			m.isAnnotationPresent(java_annotations.Permissions.class));
				            	
				            	if(!m.isAnnotationPresent(java_annotations.Permissions.class)){
				            		independentmethods ++;
				            	}
					    		if(m.getName().toString().equals("Fibonacci")){
					        		Annotation[] anno = m.getDeclaredAnnotations();
					        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
									Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(ensures=unique(this) in alive)", anno[0].toString());
								}
					            if(m.getName().toString().equals("computeFibonacci")){
					        		Annotation[] anno = m.getDeclaredAnnotations();
					        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
									Assert.assertEquals("Permissions for method "+ m.getName().toString()+" are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive)", anno[0].toString());
								}
					            if(m.getName().toString().equals("display")){
					        		Annotation[] anno = m.getDeclaredAnnotations();
					        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
									Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive)", anno[0].toString());
								}
					        	if(m.getName().toString().equals("test1")){
					        		Annotation[] anno = m.getDeclaredAnnotations();
					        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
									Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=unique(this) in alive,ensures=unique(this) in alive)", anno[0].toString());
					        	}
					        	if(m.getName().toString().equals("compute")){
					        		Annotation[] anno = m.getDeclaredAnnotations();
					        		System.out.println("I am in Sequential Integral Method '" + m + "' : " + anno[0]);
									Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=full(this) in alive * pure(#0) in alive * pure(#1) in alive,ensures=full(this) in alive * pure(#0) in alive * pure(#1) in alive)", anno[0].toString());
								}
					        	
					            for (Annotation anno : m.getDeclaredAnnotations()) {
									System.out.println("Hello g Annotation in Method '" + m + "' : " + anno);
									Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive)", anno.toString());		
					            }
				    		}catch (AssertionError error) {
				            // Output expected AssertionErrors.
				    			safeApproxmiations ++;
				    			continue;
				    		} 
				    	}
				    	System.out.println("Total number of safe approximation = "+safeApproxmiations);
			    		System.out.println("Total number of independent methods = "+independentmethods);
			        	
			           return super.visit(node); 
			          }; 
			          
					});
				  }
			}
	    }
	    public static void main(String[] args) throws SecurityException, NoSuchMethodException{
	    	TestAnnotations obj = new TestAnnotations();
	    	obj.testMethodAnnotations();
	    }*/
	    
//}
	@Test
	public void testMethodAnnotations() throws SecurityException, NoSuchMethodException {
		  
	int safeApproxmiations = 0;
	
	int independentmethods = 0;

			
		Class resourceClass = TestExample.class;
	    	try {
	    		Class<?> concreteClass = Class.forName("java_annotations.AnnotationExample");
	    		
	    		System.out.println(concreteClass.getCanonicalName());
	    		
	    	} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	
	    		Method[] methods = resourceClass.getDeclaredMethods();
		    	
		    	for (Method m : methods){
		    		try {
		            	Assert.assertNotNull("Method :"+m.getName() + " does not have any permission annotations",
		            			m.isAnnotationPresent(java_annotations.Permissions.class));
		            	
		            	if(!m.isAnnotationPresent(java_annotations.Permissions.class)){
		            		independentmethods ++;
		            	}
			    		if(m.getName().toString().equals("Fibonacci")){
			        		Annotation[] anno = m.getDeclaredAnnotations();
			        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
							Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(ensures=unique(this) in alive)", anno[0].toString());
						}
			            if(m.getName().toString().equals("computeFibonacci")){
			        		Annotation[] anno = m.getDeclaredAnnotations();
			        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
							Assert.assertEquals("Permissions for method "+ m.getName().toString()+" are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive)", anno[0].toString());
						}
			            if(m.getName().toString().equals("display")){
			        		Annotation[] anno = m.getDeclaredAnnotations();
			        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
							Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive)", anno[0].toString());
						}
			        	if(m.getName().toString().equals("main")){
			        		Annotation[] anno = m.getDeclaredAnnotations();
			        		//System.out.println("Hello g Annotation in Method '" + m + "' : " + anno[0]);
							Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=unique(this) in alive,ensures=unique(this) in alive)", anno[0].toString());
			        	}
			        	if(m.getName().toString().equals("compute")){
			        		Annotation[] anno = m.getDeclaredAnnotations();
			        		System.out.println("I am in Sequential Integral Method '" + m + "' : " + anno[0]);
							Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=full(this) in alive * pure(#0) in alive * pure(#1) in alive,ensures=full(this) in alive * pure(#0) in alive * pure(#1) in alive)", anno[0].toString());
						}
			        	
			            for (Annotation anno : m.getDeclaredAnnotations()) {
							System.out.println("Hello g Annotation in Method '" + m + "' : " + anno);
							Assert.assertEquals("Permissions are either not correct or safe permissions are generateds", "@java_annotations.Permissions(perms=@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive)", anno.toString());		
			            }
		    		}catch (AssertionError error) {
		            // Output expected AssertionErrors.
		    			safeApproxmiations ++;
		    			continue;
		    		} 
		    	}
		    		System.out.println("Total number of safe approximation = "+safeApproxmiations);
		    		System.out.println("Total number of independent methods = "+independentmethods);
	    	//}
		 }
	
	    
}
