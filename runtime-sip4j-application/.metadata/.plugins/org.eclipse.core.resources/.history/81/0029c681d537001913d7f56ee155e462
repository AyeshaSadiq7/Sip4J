/**************************************************************************
*                                                                         *
*             Java Grande Forum Benchmark Suite - Version 2.0             *
*                                                                         *
*                            produced by                                  *
*                                                                         *
*                  Java Grande Benchmarking Project                       *
*                                                                         *
*                                at                                       *
*                                                                         *
*                Edinburgh Parallel Computing Centre                      *
*                                                                         * 
*                email: epcc-javagrande@epcc.ed.ac.uk                     *
*                                                                         *
*                                                                         *
*      This version copyright (c) The University of Edinburgh, 1999.      *
*                         All rights reserved.                            *
*                                                                         *
**************************************************************************/


package jomp.sor;
import jomp.jgfutil.*; 
import jomp.jgfutil.JGFInstrumentor;

import java.util.Random;

public class JGFSORBench extends SOR implements JGFSection2{ 

  private int size; 
  private int datasizes[]={1000,1500,2000};
  private static final int JACOBI_NUM_ITER = 100;
  private static final long RANDOM_SEED = 10101010;
  int lastElement;
  int lastElementcopy;
  
  Random R;
  double G[][];

  public void JGFsetsize(int size){
    this.size = size;
  }

  public void JGFinitialise(){
	 R = new Random(RANDOM_SEED);
  }
  public void JGFkernel(){

   lastElement = datasizes[size];
   
   lastElementcopy = datasizes[size];
	  
    = RandomMatrix(lastElement,lastElementcopy,R);

    SORrun(JACOBI_NUM_ITER,1.25, G);


  }
  /*Method Name = RandomMatrix
		  Vertex Name = R, Post Permissions = share, Pre-Permissions =share*/ // it should be pure or immutable
  private static double[][] RandomMatrix(int M, int N, java.util.Random R)// ahould return unique
  {
         double A[][] = new double[M][N];

        for (int i=0; i<N; i++)
            for (int j=0; j<N; j++)
            {
                A[i][j] = R.nextDouble() * 1e-6;
             }      
          return A;
        }

  public void JGFvalidate(){

    double refval[] = {0.498574406322512,1.1234778980135105,1.9954895063582696};
    double dev = Math.abs(Gtotal - refval[size]);
    if (dev > 1.0e-12 ){
      System.out.println("Validation failed");
      System.out.println("Gtotal = " + Gtotal + "  " + dev + "  " + size);
    }
  }

  public void JGFtidyup(){
   System.gc();
  }  
  public void JGFrun(int size){
	  
   JGFInstrumentor.addTimer("Section2:SOR:Kernel", "Iterations",size);

    JGFsetsize(size); 
    JGFinitialise(); 
    JGFkernel(); 
    JGFvalidate(); 
    JGFtidyup(); 

     
    JGFInstrumentor.addOpsToTimer("Section2:SOR:Kernel", (double) (JACOBI_NUM_ITER));
 
   JGFInstrumentor.printTimer("Section2:SOR:Kernel"); 
  }

 

}
