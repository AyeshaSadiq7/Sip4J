package outputs;
import edu.cmu.cs.plural.annot.*;

@ClassStates({@State(name = "Alive")})
class JGFSparseMatmultBench {
@Perm(ensures="unique(this) in Alive")
JGFSparseMatmultBench() {   }

@Perm(requires="none(this) in alive",
ensures="unique(this) in alive")
 void main(String argv[]) { 
} 
@Perm(requires="none(this) in alive",
ensures="unique(this) in alive")
public void JGFrun(int size) { 
} 
@Perm(requires="none(this) in alive",
ensures="unique(this) in alive")
public void JGFinitialise() { 
} 
@Perm(requires="pure(#0) * full(#1) in alive",
ensures="pure(#0) * full(#1) in alive")
 double[] RandomVector(int N, java.util.Random R) { 
 return null;
} 
@Perm(requires="full(this) in alive",
ensures="full(this) in alive")
public void JGFkernel() { 
} 

public void JGFtidyup() { 
} 
@Perm(requires="pure(this) in alive",
ensures="pure(this) in alive")
public void JGFvalidate() { 
} 
@Perm(requires="full(this) in alive",
ensures="full(this) in alive")
public void JGFsetsize(int size) { 
} 

}ENDOFCLASS

@ClassStates({@State(name = "Alive")})

class JGFInstrumentor {
@Perm(ensures="unique(this) in Alive")
JGFInstrumentor() {   }

@Perm(requires="full(this) in alive",
ensures="full(this) in alive")
 void addTimer(String name, String opname, int size) { 
} 
@Perm(requires="full(this) in alive",
ensures="full(this) in alive")
 void printTimer(String name) { 
} 

}ENDOFCLASS

@ClassStates({@State(name = "Alive")})

class SparseMatmult {
@Perm(ensures="unique(this) in Alive")
SparseMatmult() {   }

@Perm(requires="full(this) * full(#0) * full(#1) * full(#2) * full(#3) * pure(#4) * pure(#5) in alive",
ensures="full(this) * full(#0) * full(#1) * full(#2) * full(#3) * pure(#4) * pure(#5) in alive")
 void test(double y[], double val[], int row[], int col[], double x[], int NUM_ITERATIONS) { 
} 

}ENDOFCLASS

@ClassStates({@State(name = "Alive")})

class JGFTimer {
@Perm(ensures="unique(this) in Alive")
JGFTimer() {   }

@Perm(requires="full(this) in alive",
ensures="full(this) in alive")
public void print() { 
} 
@Perm(requires="pure(this) in alive",
ensures="pure(this) in alive")
public double perf() { 
 return 0;
} 

}ENDOFCLASS

