package aeminium.fibonacci;

public class Fibonacci{
	
  public static Integer number;
 
 
  public static Integer computeFibonacci(Integer num) {
	
	if (num <= 1) {// Read-Only rule applied on n
	  return num; // Read-Only rule applied here
    }
	else 
    	return computeFibonacci(num-1) + computeFibonacci(num); // Recursive method call (Immutable-M-Call()) rule applied
 }
 public static void display(Integer num,Integer c){  
	System.out.println("The Fibonacci of Number =  " +num+" is = "+c);
 }
 public static void main(String[] args) {
        
    	long start = System.nanoTime(); //library function (do -nothing)
    		
    	Fibonacci.computeFibonacci(Fibonacci.number);//MethodCall(<Immutable>, number)
    	
    	Fibonacci.display(Fibonacci.number, Client.c);// // MethodCall(<Immutable>, number)
    	
    	long elapsedTime = System.nanoTime()-start;//library function (do -nothing)
    	
    	double ms = (double) elapsedTime / 1000000.0;//library function (do -nothing)
    	
    	System.out.println(" Milli Seconds Time = "+ms);//library function (do -nothing)
    }
 
}
class Client{
	public static Integer c = 10;
}
