package aeminium.fibonacci;

public class SeqFibonacci{
	
	public static Integer number;
	
	SeqFibonacci(){
		number = 1;
	}
	//Immutable(num) -> Immutable(num)
	public static void display(Integer num)
	{  
		System.out.println("The Fibonacci of Number =  " +num+" is = ");
	
	}
	public static void setValue()
	{  
		System.out.println("The Fibonacci of Number =  " +number+" is = ");
	
	}
	//Immutable(num) -> Immutable(num)
	public static Integer fibonacci(Integer num) {
		//handle case when c is accesses with class name
		
		if (num <= 1) {// Read-Only rule applied on n
			 return num; // Read-Only rule applied here
        	}
        else 
        	return fibonacci(num-1) + fibonacci(num-2); // Immutable-M-Call(number)
    }
	//none(number) -> unique(number)
    public static void main(String[] args) {
        
    	long start = System.nanoTime(); //library function (do -nothing)
    	
    	SeqFibonacci obj = new SeqFibonacci();
    	//get class name here as a qualifier to call it constructor 
    	SeqFibonacci.fibonacci(SeqFibonacci.number);//MethodCall(<Immutable>, number)
    	
    	//get class name here as a qualifier to call it constructor 
    	
    	SeqFibonacci.display(SeqFibonacci.number);// // MethodCall(<Immutable>, number)
    	
    	long elapsedTime = System.nanoTime()-start;//library function (do -nothing)
    	
    	double ms = (double) elapsedTime / 1000000.0;//library function (do -nothing)
    	
    	System.out.println(" Milli Seconds Time = "+ms);//library function (do -nothing)
    }
    
}
