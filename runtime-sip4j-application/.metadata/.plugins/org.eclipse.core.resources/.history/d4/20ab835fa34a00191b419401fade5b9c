package java_annotations;
import edu.cmu.cs.plural.annot.*;
@ClassStates({@State(name = "alive")})

public class AnnotationExample{
@Permissions(perms = "@Perm(ensures=unique(this) in alive")
public void Fibonacci() {   }

@Permissions(perms="@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive")	
public String computeFibonacci() { 
 return null;
} 
@Permissions(perms="@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive")
public void display() { 
}
public void display2() { 
}
@Permissions(perms="@Perm(requires=uniue(this) in alive,ensures=unique(this) in alive")
public void test1() { 
} 
}
class SeqIntegral {
@Perm(ensures="unique(this) in alive")
SeqIntegral() {   }

@Permissions(perms="@Perm(requires=full(this) in alive * pure(#0) in alive * pure(#1) in alive,ensures=full(this) in alive * pure(#0) in alive * pure(#1) in alive")
public String compute() {
	return null; 
 } 
@Permissions(perms="@Perm(requires=unique(this) in alive,ensures=unique(this) in alive")
public String test2() {
	return null; 
 } 
@Permissions(perms="@Perm(requires=pre(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive")
public String display() {
	return null; 
 } 
@Permissions(perms="@Perm(requires=pure(this) in alive * pure(#0) in alive,ensures=pure(this) in alive * pure(#0) in alive")
public String f() {
	return null; 
 } 

}