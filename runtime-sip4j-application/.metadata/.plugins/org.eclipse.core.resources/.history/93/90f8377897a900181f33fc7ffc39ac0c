/**************************************************************************
*                                                                         *
*             Java Grande Forum Benchmark Suite - Version 2.0             *
*                                                                         *
*                            produced by                                  *
*                                                                         *
*                  Java Grande Benchmarking Project                       *
*                                                                         *
*                                at                                       *
*                                                                         *
*                Edinburgh Parallel Computing Centre                      *
*                                                                         * 
*                email: epcc-javagrande@epcc.ed.ac.uk                     *
*                                                                         *
*                                                                         *
*      This version copyright (c) The University of Edinburgh, 1999.      *
*                         All rights reserved.                            *
*                                                                         *
**************************************************************************/


package lufact; 

import jomp.jgfutil.JGFInstrumentor;
import jomp.jgfutil.JGFSection2;


public class JGFLUFactBench extends Linpack implements JGFSection2{

  private int size;
  
  private int datasizes[] = {500,1000,2000};

  /*Method Name = main
		  Vertex Name = datasizes, Post Permissions = unique, Pre-Permissions =none*/
  
  /*Method Name = JGFsetsize
		  Vertex Name = size, Post Permissions = share, Pre-Permissions =share*/
  public void JGFsetsize(int size){
    this.size = size;
  }
  /*Method Name = JGFinitialise
		  Vertex Name = n, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = datasizes, Post Permissions = immutable, Pre-Permissions =immutable
		  Vertex Name = size, Post Permissions = pure, Pre-Permissions =pure
		  Vertex Name = ldaa, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = lda, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = a, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = b, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = x, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = ipvt, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = ops, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = norma, Post Permissions = share, Pre-Permissions =share*/
  public void JGFinitialise(){

    n = datasizes[size]; 
    ldaa = n; 
    lda = ldaa + 1;

    a = new double[ldaa][lda];
    b = new double [ldaa];
    x = new double [ldaa];
    ipvt = new int [ldaa];


    long nl = (long) n;   //avoid integer overflow
    ops = (2.0*(nl*nl*nl))/3.0 + 2.0*(nl*nl);

    norma = matgen(a,lda,n,b);    

  }
  /*Method Name = JGFkernel
		  Vertex Name = info, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = a, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = lda, Post Permissions = pure, Pre-Permissions =pure
		  Vertex Name = n, Post Permissions = pure, Pre-Permissions =pure
		  Vertex Name = ipvt, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = b, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = timers, Post Permissions = immutable, Pre-Permissions =immutable
		  Vertex Name = on, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = name, Post Permissions = immutable, Pre-Permissions =immutable
		  Vertex Name = start_time, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = time, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = calls, Post Permissions = share, Pre-Permissions =share*/
  public void JGFkernel(){

    JGFInstrumentor.startTimer("Section2:LUFact:Kernel");  
   
    info = dgefa(a,lda,n,ipvt);
    
    dgesl(a,lda,n,ipvt,b,0);

    JGFInstrumentor.stopTimer("Section2:LUFact:Kernel"); 
      
  }
  /*Method Name = JGFvalidate
		  Vertex Name = n, Post Permissions = pure, Pre-Permissions =pure
		  Vertex Name = x, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = b, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = norma, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = a, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = lda, Post Permissions = pure, Pre-Permissions =pure
		  Vertex Name = resid, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = normx, Post Permissions = share, Pre-Permissions =share
		  Vertex Name = size, Post Permissions = pure, Pre-Permissions =pure*/
  public void JGFvalidate(){

    int i;
    double eps,residn;
    final double ref[] = {6.0, 12.0, 20.0}; 

    for (i = 0; i < n; i++) {
      x[i] = b[i];
    }
    norma = matgen(a,lda,n,b);
    for (i = 0; i < n; i++) {
      b[i] = -b[i];
    } 
    dmxpy(n,b,n,x,a);
    resid = 0.0;
    normx = 0.0;
    for (i = 0; i < n; i++) {
      resid = (resid > abs(b[i])) ? resid : abs(b[i]);
      normx = (normx > abs(x[i])) ? normx : abs(x[i]);
    }

    eps =  epslon((double)1.0);
    residn = resid/( n*norma*normx*eps );
    
    if (residn > ref[size]) {
	System.out.println("Validation failed");
	System.out.println("Computed Norm Res = " + residn);
        System.out.println("Reference Norm Res = " + ref[size]); 
    }

  }
  /*Method Name = JGFtidyup
		  Vertex Name = a, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = b, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = x, Post Permissions = unique, Pre-Permissions =none
		  Vertex Name = ipvt, Post Permissions = unique, Pre-Permissions =none*/
    public void JGFtidyup(){
    // Make sure large arrays are gc'd.
    a = null; 
    b = null;
    x = null;
    ipvt = null; 
   // System.gc();  
  }

   /* Method Name = JGFrun
    		Vertex Name = ops, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = timers, Post Permissions = immutable, Pre-Permissions =immutable
    		Vertex Name = size, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = n, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = datasizes, Post Permissions = immutable, Pre-Permissions =immutable
    		Vertex Name = ldaa, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = lda, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = a, Post Permissions = unique, Pre-Permissions =none
    		Vertex Name = b, Post Permissions = unique, Pre-Permissions =none
    		Vertex Name = x, Post Permissions = unique, Pre-Permissions =none
    		Vertex Name = ipvt, Post Permissions = unique, Pre-Permissions =none
    		Vertex Name = norma, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = info, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = on, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = name, Post Permissions = immutable, Pre-Permissions =immutable
    		Vertex Name = start_time, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = time, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = calls, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = resid, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = normx, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = opcount, Post Permissions = share, Pre-Permissions =share
    		Vertex Name = opname, Post Permissions = immutable, Pre-Permissions =immutable*/
  public void JGFrun(int size){

    
    JGFInstrumentor.addTimer("Section2:LUFact:Kernel", "Mflops",size);


    JGFsetsize(size); 
    JGFinitialise(); 
    JGFkernel(); 
    JGFvalidate(); 
    JGFtidyup(); 


    JGFInstrumentor.addOpsToTimer("Section2:LUFact:Kernel", ops/1.0e06);
    JGFInstrumentor.printTimer("Section2:LUFact:Kernel"); 
  }

}
